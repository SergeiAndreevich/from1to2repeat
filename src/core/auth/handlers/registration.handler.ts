import {Request, Response} from 'express';
import {usersService} from "../../../Entity/Users/BLL/usersService.bll";
import {TypeUserInputModel} from "../../../Entity/Users/User.types";
import {ResultStatuses} from "../../types/ResultObject.type";
import {httpStatus} from "../../types/httpStatuses.type";
import {queryRepo} from "../../dataAcsessLayer/queryRepo.repository";
import {createErrorsMessages} from "../../errors/createErrorsMessage.function";

export async function registrationHandler(req: Request, res: Response): Promise<void> {
    //–ø—Ä–∏—à–ª–∏ login, email, password
    //204 - –µ—Å–ª–∏ –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–∫–æ—Ä–µ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É
    // –∫–æ–¥ –≤ —Å—Å—ã–ª–∫–µ –∫–∞–∫ –∫–≤–µ—Ä–∏-–ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ª—è–ª—è–ª—è?code=yourcode
    //–Ω—É –∏ 400, –µ—Å–ª—É —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å (–∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–ø—É—Ç)

    //console.log('=== REGISTRATION DEBUG ===');
    //console.log('1. NODE_ENV:', process.env.NODE_ENV);

    const userInput:TypeUserInputModel = req.body;
    //console.log('2. User input:', userInput);

    //–ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ –ë–õ–õ –∏ –ø—Ä–æ—Å–∏–º —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è id
    const newUserResult = await usersService.createUser(userInput);
    //console.log('3. Service result status:', newUserResult);

    //—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —é–∑–µ—Ä–∞
    if(newUserResult.status === ResultStatuses.alreadyExist){
        res.status(httpStatus.BadRequest).send(createErrorsMessages(newUserResult.errorMessage!));
        return
    }
    const user = await queryRepo.findUserByIdOrFail(newUserResult.data!.id);
    //console.log('4. User found:', user);
    if(!user){
        res.sendStatus(httpStatus.ExtraError);
        return
    }

    //console.log('5. üîí Sending response WITHOUT code for production');
        res.sendStatus(httpStatus.NoContent);

    //res.sendStatus(204)
    // ‚≠ê –í –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–ï –í–û–ó–í–†–ê–©–ê–ï–ú –ö–û–î ‚≠ê
    //if (process.env.NODE_ENV === 'test') {
    //     res.status(httpStatus.NoContent).send({
    //         message: 'confirmation code is sent to your email',
    //         confirmationCode: newUserResult.data!.code // ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
    //      });
    // } else {
    //     res.status(httpStatus.NoContent).send({
    //         message: 'confirmation code is sent to your email'
    //     });
    // }
    //res.status(httpStatus.NoContent).send({message: 'confirmation code is sent to your email'})
}