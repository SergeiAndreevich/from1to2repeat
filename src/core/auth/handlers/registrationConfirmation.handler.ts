import {Request, Response} from "express";
import {usersService} from "../../../Entity/Users/BLL/usersService.bll";
import {httpStatus} from "../../types/httpStatuses.type";
import {ResultStatuses} from "../../types/ResultObject.type";
import {createErrorsMessages} from "../../errors/createErrorsMessage.function";

export async function registrationConfirmationHandler(req:Request, res:Response) {
    const { code } = req.body; // ‚úÖ –¥–æ—Å—Ç–∞—ë–º —Å—Ç—Ä–æ–∫—É
    console.log('üîç Confirmation attempt with code:', code, typeof code);

    //204 –µ—Å–ª–∏ –∫–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç
    const result = await usersService.confirmUser(code);
    console.log('üîç Confirmation result:', result.status);

    if(result.status === ResultStatuses.unauthorized) {
        console.log('‚ùå Code expired');
        res.status(httpStatus.BadRequest).send(createErrorsMessages(result.errorMessage!));
        return
    }
    if(result.status === ResultStatuses.notFound) {
        console.log('‚ùå Code not found');
        res.status(httpStatus.BadRequest).send(createErrorsMessages(result.errorMessage!));
        return
    }
    if(result.status === ResultStatuses.alreadyExist) {
        console.log('‚ùå Already confirmed');
        res.status(httpStatus.BadRequest).send(createErrorsMessages(result.errorMessage!));
        return
    }
    console.log('‚úÖ Email confirmed successfully');
    res.sendStatus(httpStatus.NoContent)
    //400 –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏—Å—Ç–µ–∫ –∏–ª–∏ —É–∂–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
}